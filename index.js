const PORT = process.env.PORT || 3000;

require("dotenv").config();
const {
  Bot,
  Keyboard,
  InlineKeyboard,
  GrammyError,
  HttpError,
} = require("grammy");
const { getRandomQuestion, getCorrectAnswer } = require("./utils");

const app = require("express")();
app.get("/", (req, res) => {
  res.send("–ë–æ—Ç –ø—Ä–∞—Ü—é—î!");
});
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

const bot = new Bot(process.env.BOT_API_KEY);

bot.command("start", async (ctx) => {
  const startKeyboard = new Keyboard()
    .text("HTML")
    .text("CSS")
    .row()
    .text("JavaScript")
    .text("React")
    .row()
    .text("–í–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è")
    .resized();
  await ctx.reply(
    "–ü—Ä–∏–≤—ñ—Ç, –º—ñ–π –ª—é–±–∏–π –¥—Ä—É–∂–µ!ü§© \n–ì–æ—Ç—É–π–º–æ—Å—è –¥–æ —ñ–Ω—Ç–µ—Ä–≤'—é —Ä–∞–∑–æ–º! üòéüî•"
  );
  await ctx.reply("–ó —á–æ–≥–æ –ø–æ—á–Ω–µ–º–æ? –û–±–µ—Ä–∏ —Ç–µ–º—É –ø–∏—Ç–∞–Ω–Ω—è –≤ –º–µ–Ω—é üëá", {
    reply_markup: startKeyboard,
  });
});

bot.hears(
  ["HTML", "CSS", "JavaScript", "React", "–í–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è"],
  async (ctx) => {
    const topic = ctx.message.text.toLowerCase();
    const { question, questionTopic } = getRandomQuestion(topic);

    let inlineKeyboard;

    if (question.hasOptions) {
      const buttonRows = question.options.map((option) => [
        InlineKeyboard.text(
          option.text,
          JSON.stringify({
            type: `${questionTopic}-option`,
            isCorrect: option.isCorrect,
            questionId: question.id,
          })
        ),
      ]);

      inlineKeyboard = InlineKeyboard.from(buttonRows);
    } else {
      inlineKeyboard = new InlineKeyboard().text(
        "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
        JSON.stringify({
          type: questionTopic,
          questionId: question.id,
        })
      );
    }

    await ctx.reply(question.text, {
      reply_markup: inlineKeyboard,
    });
  }
);

bot.on("callback_query:data", async (ctx) => {
  const callbackData = JSON.parse(ctx.callbackQuery.data);

  if (!callbackData.type.includes("option")) {
    const answer = getCorrectAnswer(callbackData.type, callbackData.questionId);
    await ctx.reply(answer, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
    await ctx.answerCallbackQuery();
    return;
  }

  if (callbackData.isCorrect) {
    await ctx.reply("–í—ñ—Ä–Ω–æ! ‚úÖ");
    await ctx.answerCallbackQuery();
    return;
  }

  const answer = getCorrectAnswer(
    callbackData.type.split("-")[0],
    callbackData.questionId
  );
  await ctx.reply(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${answer}`);
  await ctx.answerCallbackQuery();
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–ø–∏—Ç—ñ:", e.description);
  } else if (e instanceof HttpError) {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ Telegram:", e);
  } else {
    console.error("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞:", e);
  }
});

bot.start();
